    16 bit computer

Addressable Registers
14 general purpose registers x0-xd
        
1  r0                                       | Always reset to 0 at the end of every cycle
2  r1    --                                 |
3  r2     |                                 |
4  r3     |                                 |
5  r4     |                                 |
6  r5     |                                 |
7  r6     |                                 |
8  r7     |-- User addressable registers    |
9  r8     |                                 |
10 r9     |                                 |
11 ra     | --                              |
12 rb     |  |                              | 
13 rc     |  |                              |
14 rd     |  |                              |
15 or e   |  |                              | Output Register (holds two chars) outputs to vt buffer queue if output flag is enabled
16 ir f --   |-- Special Purpose Registers  | Input Register (holds two chars) vt buffer qeue poped to this register 
17 pc        |                              | program counter register
18 sp        |                              | stack pointer register
19 fp        |                              | frame pointer register
20 lr        |                              | link register for return address of function
21 sr       --                              | status register
                                                nzct jxxx xxxx xxxx
                                                    n   indicates that the resulting value is negetive
                                                    z   indicates that the result of the operation resulted in zero
                                                    c   indicates that there was a carry or overflow
                                                    t   indicates that in signed integers, there was an overflow
                                                    j   jump mode


Three register commands
opcd    dest    src1    src2
x0  add     src1 + src2
x1  sub     src1 - src2
x2  mul     src1 * src2
x3  div     src1 / src2 (int div)
x4  rem     src1 % src2
x5  and     src1 & src2
x6  nnd     !(src1 & src2)
x7  orr     src1 | src2
x8  nor     !(src1 | src2)
x9  xor     src1 xor src2
xa  xnr     !(src1 xor src2)
xb  lod     load from address to r (address is lower byte)
xc  str     store from r to address (address is lower byte)
xd  cpi     compare reg with immediate (reg is second nibble, immediate is second byte)
xe  set     set lower byte in register to value stored in lower byte of instruction
xf  escape to two register commands

Two Register Operations
x00 escape to one register opcodes 0
x01 cmp     compares the two registers and sets flag accordingly activates jump/branch mode
x02 mov     move src2 to src1
x03 swr     swaps src1 and src2
x04 ldi     load data from address specified in r2 to r1
x05 sti     store data from r1 to address in r2
x06 
x07 
x08 
x09 
x0a 
x0b 
x0c 
x0d 
x0e 
x0f escape to one register opcodes 1


Jump/Branch mode is activated on cmp instruction (also sets jump flag) after the jump or branch, this mode is deactivated.
    -   However, it is not deactivated until it is taken or the next instruction is not a jump/branch
        e.g.    cmp r1, r2          <- flags are set, jump mode activated
                beq addr + offset   <- jump mode automatically deactivated only if taken
                bgt addr + offset   <- jump mode automatically deactivated only if taken
                set r1, 0x10        <- jump mode automatically deactivated

x0-x7 jmp   absolute jump 15 bits plus neg bit in answer after cmp/cpi for MSB
                i.e. for even address, cmp 0,0 -> jmp; and for odd: cpi r0, 0x1 -> jmp

x8  jrp     jump relative plus positive offset
x9  jrn     jump relative minus offset
xa  beq     branch if equal
xb  bne     branch if not equal
xc  bge     branch if greater than or equal
xd  bgt     branch if greater than
xe  ble     branch if less than or equal
xf  blt     branch if less than


    -   Need next incrementer for pc, or make pc user addressable (in which case do we need absolute or reletive jumps?)



x000    escape to no register opcodes 0
x001    not     invert bits in register
x002    inc     increment register
x003    dec     decrement register
x004    swp     swap bytes
x005    psh     check heap[max] < stack-pointer (sp), store register in mem[sp], decrement stack
x006    pop     check sp != 65535, pop value from stack to register, increment stack pointer
x007    sle     left shift (mul 2)
x008    ssl     (signed shift left)
x009    sri     right shift (fill with zeros, int div 2)
x00a    ssr     signed shift right
x00b    rol     rotate left
x00c    srl     signed rotate left
x00d    ror     rotate right
x00e    srr     signed rotate right
x00f    escape to no register opcodes 1

No register opcodes (trap/vector) level 0 (main)
x0000   call    
x0001   ret     return
x0002   nop     pc inc
x0003   psha    push all registers to stack and set sp and lr accordingly
x0004   popa    pop all registers from stack and set sp and lr
x0005   claf    clear all flags
x0006   cln     clear negetive flag
x0007   clz     clear zero flag
x0008   clc     clear carry flag
x0009   clt     clear signed overflow flag
x000a   clj     clear jump mode flag (force exit jmp mode)
x000b   
x000c   chr     push current value of r14 (or) to output buffer and pull input buffer from inputbuffer to r15 (ir)
x000d   
x000e   
x000f   

x0000   
x0001   
x0002   
x0003   
x0004   
x0005   
x0006   
x0007   
x0008   
x0009   
x000a   
x000b   
x000c   
x000d   
x000e   
x000f   stdn    shutdown



//  TODO, Implement Later
x00 fadd    (float)(src1 + src2), stores result in float registers
x01 fsub    (float)(src1 - src2), stores result in float registers
x02 fmul    (float)(src1 * src2), stores result in float registers
x03 fdiv    (float)(src1 / src2), stores result in float registers
x04 fexp    (float)(src1 ^ src2), stores result in float registers
x05 flog    log on floats, stores result in float registers
x06 intf    integer to float appriximation (usually exact), stores result in float registers
x07 fint    float to integer approximation