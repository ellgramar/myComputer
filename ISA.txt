    16 bit computer

Addressable Registers
14 general purpose registers x0-xd
        
0  r0                          | Always reset to 0 at the end of every cycle
1  r1   --                     |--
2  r2     |                    |  |
3  r3     |                    |  |
4  r4     |                    |  |
5  r5     |                    |  |-- Standard General purpose
6  r6     |                    |  |
7  r7     |   User addressable |  |
8  r8     |-- addressable      |  |
9 r9     |   Registers        |__
10 ra     | --                 |--
11 rb     |  |                 |  |-- ra with rb and rc with rd are used for 
12 rc     |  |                 |  |     32 bit addressable modes for bus interfaces
13 rd     |  |                 |__
14 or e   |  |   Special       | Output Register (holds two chars) outputs to vt buffer queue if output flag is enabled
15 ir f --   |-- Purpose       | Input Register (holds two chars) vt buffer qeue poped to this register 
16 pc        |   Registers     | program counter register
17 sp        |                 | stack pointer register
18 fp        |                 | frame pointer register
19 lr        |                 | link register for return address of function
20 sr       --                 | status register
                                    nzct oijx xxxx bbbb           
                                        n   indicates that the resulting value is negetive
                                        z   indicates that the result of the operation resulted in zero
                                        c   indicates that there was a carry or overflow
                                        t   indicates that in signed integers, there was an overflow
                                        o   output flag (raise to output two chars, it is then cleared)
                                        i   input flag (raise to get next two chars in replacing previous ones)
                                        j   jump bit to toggle jump mode
                                        b   MSBs for jump instructions (absolute jump just takes the LSB)

Three register commands
opcd    dest    src1    src2
x0  add     src1 + src2
x1  sub     src1 - src2
x2  mul     src1 * src2
x3  div     src1 / src2 (int div)
x4  rem     src1 % src2
x5  and     src1 & src2
x6  nnd     !(src1 & src2)
x7  orr     src1 | src2
x8  nor     !(src1 | src2)
x9  xor     src1 xor src2
xa  xnr     !(src1 xor src2)
xb  lod     load from address to r (address is lower byte)
xc  str     store from r to address (address is lower byte)
xd  set     set lower byte in register to value stored in lower byte of instruction
xe  
xf  escape to two register commands

Two Register Operations
x00 escape to one register opcodes 0
x01 cmp     compares the two registers and sets flag accordingly activates jump/branch mode
x02 jod     jump to odd address (sets jump flag before calling cmp function)
x03 mov     move src2 to src1
x04 swr     swaps src1 and src2
x05 ldi     load data from address specified in r2 to r1
x06 sti     store data from r1 to address in r2
x06 
x07 
x08 
x09 
x0a 
x0b 
x0c 
x0d 
x0e 
x0f

Jump/Branch mode is activated on cmp instruction (also sets jump flag). After the jump or branch, this mode is deactivated.
    -   However, it is not deactivated until it is taken or the next instruction is not a jump/branch
        e.g.    cmp r1, r2          <- flags are set, jump mode activated
                beq addr + offset   <- jump mode automatically deactivated only if taken
                bgt addr + offset   <- jump mode automatically deactivated only if taken
                set r1, 0x10        <- jump mode automatically deactivated

x0  jmp     absolute jump: MSBs = 4 LSBs in sr, 12 LSBs in opcode
                i.e. 0xefef: sr = nzct oijx xxxx 1110; opcode = 0000 1111 1110 1111
x1  jrp     jump relative plus positive offset
x2  jrn     jump relative minus offset
x3  beq     branch if equal
x4  bne     branch if not equal
x5  bge     branch if greater than or equal
x6  bgt     branch if greater than
x7  ble     branch if less than or equal
x8  blt     branch if less than
x9  stb     set jump bits based on lowest nibble
xa  ajb     add to jump bits from lowest nibble (be careful of overflow as it is not detected)
xb  sjb     subtract from jump bits same as add
xc  cjb     clear jump bits in status register 
xd  
xe  
xf  

    -   Need next incrementer for pc, or make pc user addressable (in which case do we need absolute or reletive jumps?)

x000    escape to no register opcodes 0
x001    not     invert bits in register
x002    inc     increment register
x003    dec     decrement register
x004    swp     swap bytes
x005    psh     check heap[max] < stack-pointer (sp), store register in mem[sp], decrement stack
x006    pop     check sp != 65535, pop value from stack to register, increment stack pointer
x007    sle     left shift (mul 2)
x008    ssl     (signed shift left)
x009    sri     shift right (fill with zeros, int div 2)
x00a    ssr     signed shift right
x00b    rol     rotate left
x00c    srl     signed rotate left
x00d    ror     rotate right
x00e    srr     signed rotate right
x00f    escape to no register opcodes 1

No register opcodes (trap/vector) level 0 (main)
x0000   call    
x0001   ret     return
x0002   nop     pc inc
x0003   psha    push all registers to stack and set sp and lr accordingly
x0004   popa    pop all registers from stack and set sp and lr
x0005   out     push output register char values to vt write buffer
x0006   in      pull two chars from vt read buffer to input register 
x0007   io      push and pull at the same time (for screen echoing)
x0008   claf    clear all flags
x0009   cln     clear negetive flag
x000a   clz     clear zero flag
x000b   clc     clear carry flag
x000c   clt     clear signed overflow flag
x000d   clj     clear jump mode flag (force exit jmp mode)
x000e   
x000f   chr     push current value of r14 (or) to output buffer and pull input buffer from inputbuffer to r15 (ir)
   
   
   

x00f0   
x00f1   
x00f2   
x00f3   
x00f4   
x00f5   
x00f6   
x00f7   
x00f8   
x00f9   
x00fa   
x00fb   
x00fc   
x00fd   
x00fe   
x00ff   stdn    shutdown



//  TODO, Implement Later
x00 fadd    (float)(src1 + src2), stores result in float registers
x01 fsub    (float)(src1 - src2), stores result in float registers
x02 fmul    (float)(src1 * src2), stores result in float registers
x03 fdiv    (float)(src1 / src2), stores result in float registers
x04 fexp    (float)(src1 ^ src2), stores result in float registers
x05 flog    log on floats, stores result in float registers
x06 intf    integer to float appriximation (usually exact), stores result in float registers
x07 fint    float to integer approximation